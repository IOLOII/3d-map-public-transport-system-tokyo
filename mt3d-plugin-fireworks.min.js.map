{"version":3,"file":"mt3d-plugin-fireworks.min.js","sources":["../src/index.js"],"sourcesContent":["import {THREE} from 'mini-tokyo-3d';\nimport fireworksSVG from './fireworks.svg';\n\nconst {\n    AdditiveBlending,\n    BufferGeometry,\n    DynamicDrawUsage,\n    Float32BufferAttribute,\n    FloatType,\n    Group,\n    MathUtils,\n    Points,\n    RawShaderMaterial,\n    Texture,\n    Vector3\n} = THREE;\n\nfunction clamp(value, lower, upper) {\n    return Math.min(Math.max(value, lower), upper);\n}\n\nconst friction = 0.998;\nconst textureSize = 128.0;\nconst particleSize = 300;\n\nconst getOffsetXYZ = i => {\n    const offset = 3;\n    const index = i * offset;\n    const x = index;\n    const y = index + 1;\n    const z = index + 2;\n\n    return {x, y, z};\n};\n\nconst getOffsetRGBA = i => {\n    const offset = 4;\n    const index = i * offset;\n    const r = index;\n    const g = index + 1;\n    const b = index + 2;\n    const a = index + 3;\n\n    return {r, g, b, a};\n};\n\nconst getRandomNum = (max = 0, min = 0) => Math.floor(Math.random() * (max + 1 - min)) + min;\n\nconst drawRadialGradation = (ctx, canvasRadius, canvasW, canvasH) => {\n    ctx.save();\n    const gradient = ctx.createRadialGradient(canvasRadius, canvasRadius, 0, canvasRadius, canvasRadius, canvasRadius);\n    gradient.addColorStop(0.0, 'rgba(255,255,255,1.0)');\n    gradient.addColorStop(0.5, 'rgba(255,255,255,0.5)');\n    gradient.addColorStop(1.0, 'rgba(255,255,255,0)');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvasW, canvasH);\n    ctx.restore();\n};\n\nconst getTexture = () => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    const diameter = textureSize;\n    canvas.width = diameter;\n    canvas.height = diameter;\n    const canvasRadius = diameter / 2;\n\n    /* gradation circle\n    ------------------------ */\n    drawRadialGradation(ctx, canvasRadius, canvas.width, canvas.height);\n    const texture = new Texture(canvas);\n    texture.type = FloatType;\n    texture.needsUpdate = true;\n    return texture;\n};\n\nconst canvasTexture = getTexture();\n\nconst getPointMesh = (num, vels, type) => {\n    // geometry\n    const bufferGeometry = new BufferGeometry();\n    const vertices = [];\n    const velocities = [];\n    const colors = [];\n    const adjustSizes = [];\n    const masses = [];\n    const colorType = Math.random() > 0.3 ? 'single' : 'multiple';\n    const singleColor = getRandomNum(100, 20) * 0.01;\n    const multipleColor = () => getRandomNum(100, 1) * 0.01;\n    let rgbType;\n    const rgbTypeDice = Math.random();\n\n    if (rgbTypeDice > 0.66) {\n        rgbType = 'red';\n    } else if (rgbTypeDice > 0.33) {\n        rgbType = 'green';\n    } else {\n        rgbType = 'blue';\n    }\n    for (let i = 0; i < num; i++) {\n        const pos = new Vector3(0, 0, 0);\n\n        vertices.push(pos.x, pos.y, pos.z);\n        velocities.push(vels[i].x, vels[i].y, vels[i].z);\n        if (type === 'seed') {\n            let size;\n\n            if (type === 'trail') {\n                size = Math.random() * 0.1 + 0.1;\n            } else {\n                // size = Math.pow(vels[i].z, 2) * 0.04;\n                size = Math.random() * 0.1 + 0.1;\n            }\n            if (i === 0) {\n                size *= 1.1;\n            }\n            adjustSizes.push(size * 5);\n            masses.push(size * 0.017);\n            colors.push(1.0, 1.0, 1.0, 1.0);\n        } else {\n            const size = getRandomNum(particleSize, 10) * 0.001;\n\n            adjustSizes.push(size * 5);\n            masses.push(size * 0.017);\n            if (colorType === 'multiple') {\n                colors.push(multipleColor(), multipleColor(), multipleColor(), 1.0);\n            } else {\n                switch (rgbType) {\n                case 'red':\n                    colors.push(singleColor, 0.1, 0.1, 1.0);\n                    break;\n                case 'green':\n                    colors.push(0.1, singleColor, 0.1, 1.0);\n                    break;\n                case 'blue':\n                    colors.push(0.1, 0.1, singleColor, 1.0);\n                    break;\n                default:\n                    colors.push(singleColor, 0.1, 0.1, 1.0);\n                }\n            }\n        }\n    }\n    bufferGeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3).setUsage(DynamicDrawUsage));\n    bufferGeometry.setAttribute('velocity', new Float32BufferAttribute(velocities, 3).setUsage(DynamicDrawUsage));\n    bufferGeometry.setAttribute('color', new Float32BufferAttribute(colors, 4).setUsage(DynamicDrawUsage));\n    bufferGeometry.setAttribute('adjustSize', new Float32BufferAttribute(adjustSizes, 1).setUsage(DynamicDrawUsage));\n    bufferGeometry.setAttribute('mass', new Float32BufferAttribute(masses, 1).setUsage(DynamicDrawUsage));\n\n    // material\n    const shaderMaterial = new RawShaderMaterial({\n        uniforms: {\n            size: {\n                type: 'f',\n                value: textureSize\n            },\n            texture: {\n                type: 't',\n                value: canvasTexture\n            }\n        },\n        transparent: true,\n        // Display of \"blending: THREE.AdditiveBlending\" does not work properly if \"depthWrite\" property is set to true.\n        // Therefore, it is necessary to make it false in the case of making the image transparent by blending.\n        depthWrite: false,\n        blending: AdditiveBlending,\n        vertexShader: `\n            precision highp float;\n            attribute vec3 position;\n            uniform mat4 projectionMatrix;\n            uniform mat4 modelViewMatrix;\n            uniform float size;\n            attribute float adjustSize;\n            uniform vec3 cameraPosition;\n            attribute vec3 velocity;\n            attribute vec4 color;\n            varying vec4 vColor;\n            void main() {\n                vColor = color;\n                vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n                gl_PointSize = size * adjustSize * (100.0 / length(modelViewPosition.xyz));\n                gl_Position = projectionMatrix * modelViewPosition;\n            }\n        `,\n        fragmentShader: `\n            precision mediump float;\n            uniform sampler2D texture;\n            varying vec4 vColor;\n            void main() {\n                vec4 color = vec4(texture2D(texture, gl_PointCoord));\n                gl_FragColor = color * vColor;\n            }\n        `\n    });\n\n    return new Points(bufferGeometry, shaderMaterial);\n};\n\nclass ParticleMesh {\n\n    constructor(scale, num, vels, type) {\n        this.scale = scale;\n        this.particleNum = num;\n        this.timerStartFading = 10;\n        this.mesh = getPointMesh(num, vels, type);\n    }\n\n    update(gravity) {\n        if (this.timerStartFading > 0) {\n            this.timerStartFading -= 0.3;\n        }\n\n        const {position, velocity, color, mass} = this.mesh.geometry.attributes;\n        const decrementRandom = () => (Math.random() > 0.5 ? 0.98 : 0.96);\n        const decrementByVel = v => (Math.random() > 0.5 ? 0 : (1 - v) * 0.1);\n\n        for (let i = 0; i < this.particleNum; i++) {\n            const {x, y, z} = getOffsetXYZ(i);\n\n            velocity.array[z] += gravity.z - mass.array[i] * this.scale;\n            velocity.array[x] *= friction;\n            velocity.array[y] *= friction;\n            velocity.array[z] *= friction;\n            position.array[x] += velocity.array[x];\n            position.array[y] += velocity.array[y];\n            position.array[z] += velocity.array[z];\n\n            const {a} = getOffsetRGBA(i);\n\n            if (this.timerStartFading <= 0) {\n                color.array[a] *= decrementRandom() - decrementByVel(color.array[a]);\n                if (color.array[a] < 0.001) {\n                    color.array[a] = 0;\n                }\n            }\n        }\n        position.needsUpdate = true;\n        velocity.needsUpdate = true;\n        color.needsUpdate = true;\n    }\n\n    disposeAll() {\n        this.mesh.geometry.dispose();\n        this.mesh.material.dispose();\n    }\n\n}\n\nclass ParticleSeedMesh extends ParticleMesh {\n\n    constructor(scale, num, vels) {\n        super(scale, num, vels, 'seed');\n    }\n\n    update(gravity) {\n        const {position, velocity, color, mass} = this.mesh.geometry.attributes;\n        const decrementRandom = () => (Math.random() > 0.3 ? 0.99 : 0.96);\n        const decrementByVel = v => (Math.random() > 0.3 ? 0 : (1 - v) * 0.1);\n        const shake = () => (Math.random() > 0.5 ? 0.05 : -0.05) * this.scale;\n        const dice = () => Math.random() > 0.1;\n        const _f = friction * 0.98;\n\n        for (let i = 0; i < this.particleNum; i++) {\n            const {x, y, z} = getOffsetXYZ(i);\n\n            velocity.array[z] += gravity.z - mass.array[i] * this.scale;\n            velocity.array[x] *= _f;\n            velocity.array[y] *= _f;\n            velocity.array[z] *= _f;\n            position.array[x] += velocity.array[x];\n            position.array[y] += velocity.array[y];\n            position.array[z] += velocity.array[z];\n            if (dice()) {\n                position.array[x] += shake();\n            }\n            if (dice()) {\n                position.array[y] += shake();\n            }\n\n            const {a} = getOffsetRGBA(i);\n\n            color.array[a] *= decrementRandom() - decrementByVel(color.array[a]);\n            if (color.array[a] < 0.001) {\n                color.array[a] = 0;\n            }\n        }\n        position.needsUpdate = true;\n        velocity.needsUpdate = true;\n        color.needsUpdate = true;\n    }\n\n}\n\nclass ParticleTailMesh extends ParticleMesh {\n\n    constructor(scale, num, vels) {\n        super(scale, num, vels, 'trail');\n    }\n\n    update(gravity) {\n        const {position, velocity, color, mass} = this.mesh.geometry.attributes;\n        const decrementRandom = () => (Math.random() > 0.3 ? 0.98 : 0.95);\n        const shake = () => (Math.random() > 0.5 ? 0.05 : -0.05) * this.scale;\n        const dice = () => Math.random() > 0.2;\n\n        for (let i = 0; i < this.particleNum; i++) {\n            const {x, y, z} = getOffsetXYZ(i);\n\n            velocity.array[z] += gravity.z - mass.array[i] * this.scale;\n            velocity.array[x] *= friction;\n            velocity.array[y] *= friction;\n            velocity.array[z] *= friction;\n            position.array[x] += velocity.array[x];\n            position.array[y] += velocity.array[y];\n            position.array[z] += velocity.array[z];\n            if (dice()) {\n                position.array[x] += shake();\n            }\n            if (dice()) {\n                position.array[y] += shake();\n            }\n\n            const {a} = getOffsetRGBA(i);\n\n            color.array[a] *= decrementRandom();\n            if (color.array[a] < 0.001) {\n                color.array[a] = 0;\n            }\n        }\n        position.needsUpdate = true;\n        velocity.needsUpdate = true;\n        color.needsUpdate = true;\n    }\n\n}\n\nclass BasicFireWorks {\n\n    constructor(scale, position) {\n        this.scale = scale;\n        this.position = position;\n        this.gravity = new Vector3(0, 0, -0.005 * scale);\n        this.meshGroup = new Group();\n        this.isExplode = false;\n        const max = 400;\n        const min = 150;\n        this.petalsNum = getRandomNum(max, min);\n        this.life = 150;\n        this.seed = this.getSeed();\n        this.meshGroup.add(this.seed.mesh);\n        this.flowerSizeRate = MathUtils.mapLinear(this.petalsNum, min, max, 0.4, 0.7);\n    }\n\n    getSeed() {\n        const num = 40;\n        const vels = [];\n\n        for (let i = 0; i < num; i++) {\n            const vx = 0;\n            const vy = 0;\n            const vz = (i === 0 ? Math.random() * 2.5 + 0.9 : Math.random() * 2.0 + 0.4) * this.scale;\n\n            vels.push(new Vector3(vx, vy, vz));\n        }\n\n        const pm = new ParticleSeedMesh(this.scale, num, vels);\n        const x = this.position.x;\n        const y = this.position.y;\n        const z = 0;\n\n        pm.mesh.position.set(x, y, z);\n        return pm;\n    }\n\n    explode(pos) {\n        this.isExplode = true;\n        this.flower = this.getFlower(pos);\n        this.meshGroup.add(this.flower.mesh);\n        this.meshGroup.remove(this.seed.mesh);\n        this.seed.disposeAll();\n    }\n\n    getFlower(pos) {\n        const num = this.petalsNum;\n        const vels = [];\n        let radius;\n        const dice = Math.random();\n\n        if (dice > 0.5) {\n            for (let i = 0; i < num; i++) {\n                radius = getRandomNum(120, 60) * 0.01 * this.scale;\n\n                const theta = MathUtils.degToRad(Math.random() * 180);\n                const phi = MathUtils.degToRad(Math.random() * 360);\n                const vx = Math.sin(theta) * Math.cos(phi) * radius;\n                const vy = Math.sin(theta) * Math.sin(phi) * radius;\n                const vz = Math.cos(theta) * radius;\n                const vel = new Vector3(vx, vy, vz);\n\n                vel.multiplyScalar(this.flowerSizeRate);\n                vels.push(vel);\n            }\n        } else {\n            const zStep = 180 / num;\n            const trad = (360 * (Math.random() * 20 + 1)) / num;\n            const xStep = trad;\n            const yStep = trad;\n\n            radius = getRandomNum(120, 60) * 0.01 * this.scale;\n            for (let i = 0; i < num; i++) {\n                const sphereRate = Math.sin(MathUtils.degToRad(zStep * i));\n                const vz = Math.cos(MathUtils.degToRad(zStep * i)) * radius;\n                const vx = Math.cos(MathUtils.degToRad(xStep * i)) * sphereRate * radius;\n                const vy = Math.sin(MathUtils.degToRad(yStep * i)) * sphereRate * radius;\n                const vel = new Vector3(vx, vy, vz);\n                vel.multiplyScalar(this.flowerSizeRate);\n                vels.push(vel);\n            }\n        }\n\n        const particleMesh = new ParticleMesh(this.scale, num, vels);\n\n        particleMesh.mesh.position.set(pos.x, pos.y, pos.z);\n        return particleMesh;\n    }\n\n    update() {\n        if (!this.isExplode) {\n            this.drawTail();\n        } else {\n            this.flower.update(this.gravity);\n            if (this.life > 0) {\n                this.life -= 1;\n            }\n        }\n    }\n\n    drawTail() {\n        this.seed.update(this.gravity);\n        const {position, velocity} = this.seed.mesh.geometry.attributes;\n        let count = 0;\n        let isComplete = true;\n\n        // Check if the y-axis speed is down for all particles\n        for (let i = 0, l = velocity.array.length; i < l; i++) {\n            const v = velocity.array[i];\n            const index = i % 3;\n\n            if (index === 2 && v > 0) {\n                count++;\n            }\n        }\n\n        isComplete = count === 0;\n        if (!isComplete) {\n            return;\n        }\n\n        const {x, y, z} = this.seed.mesh.position;\n        const flowerPos = new Vector3(x, y, z);\n        let highestPos = 0;\n        let offsetPos;\n\n        for (let i = 0, l = position.array.length; i < l; i++) {\n            const p = position.array[i];\n            const index = i % 3;\n\n            if (index === 2 && p > highestPos) {\n                highestPos = p;\n                offsetPos = new Vector3(position.array[i - 2], position.array[i - 1], p);\n            }\n        }\n        flowerPos.add(offsetPos);\n        this.explode(flowerPos);\n    }\n\n}\n\nclass RichFireWorks extends BasicFireWorks {\n\n    constructor(scale, position) {\n        super(scale, position);\n\n        const max = 150;\n        const min = 100;\n\n        this.petalsNum = getRandomNum(max, min);\n        this.flowerSizeRate = MathUtils.mapLinear(this.petalsNum, min, max, 0.4, 0.7);\n        this.tailMeshGroup = new Group();\n        this.tails = [];\n    }\n\n    explode(pos) {\n        this.isExplode = true;\n        this.flower = this.getFlower(pos);\n        this.tails = this.getTail();\n        this.meshGroup.add(this.flower.mesh);\n        this.meshGroup.add(this.tailMeshGroup);\n    }\n\n    getTail() {\n        const tails = [];\n        const num = 20;\n        const {color: petalColor} = this.flower.mesh.geometry.attributes;\n\n        for (let i = 0; i < this.petalsNum; i++) {\n            const vels = [];\n\n            for (let j = 0; j < num; j++) {\n                const vx = 0;\n                const vy = 0;\n                const vz = 0;\n\n                vels.push(new Vector3(vx, vy, vz));\n            }\n\n            const tail = new ParticleTailMesh(this.scale, num, vels);\n\n            const {r, g, b, a} = getOffsetRGBA(i);\n\n            const petalR = petalColor.array[r];\n            const petalG = petalColor.array[g];\n            const petalB = petalColor.array[b];\n            const petalA = petalColor.array[a];\n\n            const {position, color} = tail.mesh.geometry.attributes;\n\n            for (let k = 0; k < position.count; k++) {\n                const {r, g, b, a} = getOffsetRGBA(k);\n\n                color.array[r] = petalR;\n                color.array[g] = petalG;\n                color.array[b] = petalB;\n                color.array[a] = petalA;\n            }\n\n            const {x, y, z} = this.flower.mesh.position;\n\n            tail.mesh.position.set(x, y, z);\n            tails.push(tail);\n            this.tailMeshGroup.add(tail.mesh);\n        }\n        return tails;\n    }\n\n    update() {\n        if (!this.isExplode) {\n            this.drawTail();\n        } else {\n            this.flower.update(this.gravity);\n\n            const {position: flowerGeometory} = this.flower.mesh.geometry.attributes;\n\n            for (let i = 0, l = this.tails.length; i < l; i++) {\n                const tail = this.tails[i];\n                tail.update(this.gravity);\n                const {x, y, z} = getOffsetXYZ(i);\n                const flowerPos = new Vector3(\n                    flowerGeometory.array[x],\n                    flowerGeometory.array[y],\n                    flowerGeometory.array[z]\n                );\n                const {position, velocity} = tail.mesh.geometry.attributes;\n\n                for (let k = 0; k < position.count; k++) {\n                    const {x, y, z} = getOffsetXYZ(k);\n                    const desiredVelocity = new Vector3();\n                    const tailPos = new Vector3(position.array[x], position.array[y], position.array[z]);\n                    const tailVel = new Vector3(velocity.array[x], velocity.array[y], velocity.array[z]);\n\n                    desiredVelocity.subVectors(flowerPos, tailPos);\n\n                    const steer = desiredVelocity.sub(tailVel);\n\n                    steer.normalize();\n                    steer.multiplyScalar(Math.random() * 0.0003 * this.life * this.scale);\n                    velocity.array[x] += steer.x;\n                    velocity.array[y] += steer.y;\n                    velocity.array[z] += steer.z;\n                }\n                velocity.needsUpdate = true;\n            }\n\n            if (this.life > 0) {\n                this.life -= 1.2;\n            }\n        }\n    }\n\n}\n\nclass FireworksLayer {\n\n    constructor(options) {\n        const me = this;\n\n        me.id = options.id;\n        me.type = 'three';\n        me.lightColor = 'white';\n        me.fireworksInstances = {};\n\n        const repeat = () => {\n            me.tick();\n            requestAnimationFrame(repeat);\n        };\n\n        repeat();\n    }\n\n    onAdd(map, context) {\n        const me = this;\n\n        me.map = map;\n        me.scene = context.scene;\n    }\n\n    tick() {\n        const {fireworksInstances, scene} = this;\n\n        for (const key of Object.keys(fireworksInstances)) {\n            const instances = fireworksInstances[key];\n            const exploadedIndexList = [];\n\n            for (let i = instances.length - 1; i >= 0; i--) {\n                const instance = instances[i];\n\n                instance.update();\n                if (instance.isExplode) {\n                    exploadedIndexList.push(i);\n                }\n            }\n\n            for (let i = 0, l = exploadedIndexList.length; i < l; i++) {\n                const index = exploadedIndexList[i];\n                const instance = instances[index];\n\n                if (!instance) {\n                    return;\n                }\n\n                /*\n                    Be careful because js heap size will continue to increase unless you do the following:\n                    - Remove unuse mesh from scene\n                    - Execute dispose method of Geometres and Materials in the Mesh\n                */\n                instance.meshGroup.remove(instance.seed.mesh);\n                instance.seed.disposeAll();\n                if (instance.life <= 0) {\n                    scene.remove(instance.meshGroup);\n                    if (instance.tailMeshGroup) {\n                        instance.tails.forEach(v => {\n                            v.disposeAll();\n                        });\n                    }\n                    instance.flower.disposeAll();\n                    instances.splice(index, 1);\n                }\n            }\n        }\n    }\n\n    launchFireWorks(key, lngLat) {\n        const me = this;\n        const {map, scene, fireworksInstances} = me;\n        let instances = fireworksInstances[key];\n\n        if (!instances) {\n            instances = me.fireworksInstances[key] = [];\n        }\n\n        if (instances.length > 5) {\n            return;\n        }\n\n        const modelPosition = map.getModelPosition(lngLat);\n        const modelScale = map.getModelScale();\n        const scale = Math.pow(2, 17 - clamp(map.getZoom(), 14, 16)) * modelScale;\n        const position = {\n            x: modelPosition.x + (Math.random() * 400 - 200) * modelScale,\n            y: modelPosition.y + (Math.random() * 400 - 200) * modelScale\n        };\n        const fw = Math.random() > 0.5 ? new BasicFireWorks(scale, position) : new RichFireWorks(scale, position);\n\n        instances.push(fw);\n        scene.add(fw.meshGroup);\n    }\n\n}\n\nclass FireworksPlugin {\n\n    constructor() {\n        const me = this;\n\n        me.id = 'fireworks';\n        me.name = {\n            en: 'Fireworks',\n            ja: '花火',\n            ko: '불꽃놀이',\n            ne: 'आतिशबाजी',\n            pt: 'Fogos de artifício',\n            th: 'ดอกไม้ไฟ',\n            'zh-Hans': '烟花',\n            'zh-Hant': '煙花'\n        };\n        me.iconStyle = {\n            backgroundSize: '32px',\n            backgroundImage: `url(\"${fireworksSVG}\")`\n        };\n        me.viewModes = ['ground'];\n        me.layer = new FireworksLayer({id: me.id});\n        me.plans = [{\n            // Sumidagawa 1 (2020-07-23 19:00 to 20:30)\n            coord: [139.8061467, 35.7168468],\n            start: 1595498400000,\n            end: 1595503800000\n        }, {\n            // Sumidagawa 2 (2020-07-23 19:30 to 20:30)\n            coord: [139.7957901, 35.7053016],\n            start: 1595500200000,\n            end: 1595503800000\n        }, {\n            // Adachi (2020-07-24 19:30 to 20:30)\n            coord: [139.7960082, 35.7596802],\n            start: 1595586600000,\n            end: 1595590200000\n        }, {\n            // Makuhari (2020-07-25 19:10 to 20:20)\n            coord: [140.0265839, 35.6429351],\n            start: 1595671800000,\n            end: 1595676000000\n        }, {\n            // Minatomirai (2020-07-26 19:30 to 19:55)\n            coord: [139.6411158, 35.4606603],\n            start: 1595759400000,\n            end: 1595760900000\n        }, {\n            // Jingu (2020-08-08 19:30 to 20:30)\n            coord: [139.7186873, 35.6765851],\n            start: 1596882600000,\n            end: 1596886200000\n        }, {\n            // Edogawa (2020-08-09 19:15 to 20:30)\n            coord: [139.9028813, 35.7187124],\n            start: 1596968100000,\n            end: 1596972600000\n        }, {\n            // Itabashi (2020-08-10 19:00 to 20:30)\n            coord: [139.6759402, 35.7988664],\n            start: 1597053600000,\n            end: 1597059000000\n        }, {\n            // Olympic Opening (2021-07-23 20:00 to 23:00)\n            coord: [139.7161639, 35.6759322],\n            start: 1627038000000,\n            end: 1627048800000\n        }, {\n            // Olympic Closing (2021-08-08 20:00 to 23:00)\n            coord: [139.7161639, 35.6759322],\n            start: 1628420400000,\n            end: 1628431200000\n        }, {\n            // Disney Light the Night (Everyday 20:00 to 20:05)\n            coord: [139.8848537, 35.6307327],\n            start: 39600000,\n            end: 39900000,\n            daily: true\n        }];\n    }\n\n    onAdd(map) {\n        const me = this;\n\n        me.map = map;\n        map.addLayer(me.layer);\n    }\n\n    onRemove(map) {\n        map.removeLayer(this.id);\n    }\n\n    onEnabled() {\n        const me = this;\n\n        me.interval = setInterval(() => {\n            const now = me.map.clock.getTime();\n\n            me.plans.forEach((plan, index) => {\n                if ((plan.daily && now % 86400000 >= plan.start && now % 86400000 < plan.end ||\n                    !plan.daily && now >= plan.start && now < plan.end) && Math.random() > 0.7) {\n                    me.layer.launchFireWorks(index, plan.coord);\n                }\n            });\n        }, 100);\n    }\n\n    onDisabled() {\n        clearInterval(this.interval);\n    }\n\n    onVisibilityChanged(visible) {\n        const me = this;\n\n        me.map.setLayerVisibility(me.id, visible ? 'visible' : 'none');\n    }\n\n}\n\nexport default function() {\n    return new FireworksPlugin();\n}\n"],"names":["AdditiveBlending","BufferGeometry","DynamicDrawUsage","Float32BufferAttribute","FloatType","Group","MathUtils","Points","RawShaderMaterial","Texture","Vector3","THREE","friction","getOffsetXYZ","i","index","x","y","z","getOffsetRGBA","r","g","b","a","getRandomNum","max","min","Math","floor","random","canvasTexture","canvas","document","createElement","ctx","getContext","width","height","canvasRadius","canvasW","canvasH","save","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","restore","drawRadialGradation","diameter","texture","type","needsUpdate","getTexture","ParticleMesh","constructor","scale","num","vels","this","particleNum","timerStartFading","mesh","bufferGeometry","vertices","velocities","colors","adjustSizes","masses","colorType","singleColor","multipleColor","rgbType","rgbTypeDice","pos","push","size","setAttribute","setUsage","shaderMaterial","uniforms","value","transparent","depthWrite","blending","vertexShader","fragmentShader","getPointMesh","update","gravity","position","velocity","color","mass","geometry","attributes","array","v","disposeAll","dispose","material","ParticleSeedMesh","super","shake","dice","_f","ParticleTailMesh","BasicFireWorks","meshGroup","isExplode","petalsNum","life","seed","getSeed","add","flowerSizeRate","mapLinear","vx","vy","vz","pm","set","explode","flower","getFlower","remove","radius","theta","degToRad","phi","sin","cos","vel","multiplyScalar","zStep","trad","xStep","yStep","sphereRate","particleMesh","drawTail","count","isComplete","l","length","flowerPos","offsetPos","highestPos","p","RichFireWorks","tailMeshGroup","tails","getTail","petalColor","j","tail","petalR","petalG","petalB","petalA","k","flowerGeometory","desiredVelocity","tailPos","tailVel","subVectors","steer","sub","normalize","FireworksLayer","options","me","id","lightColor","fireworksInstances","repeat","tick","requestAnimationFrame","onAdd","map","context","scene","key","Object","keys","instances","exploadedIndexList","instance","forEach","splice","launchFireWorks","lngLat","modelPosition","getModelPosition","modelScale","getModelScale","pow","getZoom","upper","fw","FireworksPlugin","name","en","ja","ko","ne","pt","th","iconStyle","backgroundSize","backgroundImage","viewModes","layer","plans","coord","start","end","daily","addLayer","onRemove","removeLayer","onEnabled","interval","setInterval","now","clock","getTime","plan","onDisabled","clearInterval","onVisibilityChanged","visible","setLayerVisibility"],"mappings":"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"}